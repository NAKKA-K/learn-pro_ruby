# 例外処理を実装した場合に、例外の有無にかかわらず絶対に実行したい処理がある場合はensure句を使う
# 例外が発生しない場合に実行されるelse句も存在する
begin
    # 例外が発生するかもしれない処理
rescue => exception
    # 例外を補足し、処理する
else
    # 例外が発生しなかった場合に限り実行される
ensure
    # 例外の有無にかかわらず実行される(異常終了するとしても呼ばれる)
end

# ファイルのクローズ等をensureに書くこともあるが、ブロック付きでオープンすると確実に開放してくれる
# ブロック付きメソッドを使うことで自動的に処理できるケースが多いため、APIドキュメントで逐次確認しよう

# 例外処理の戻り値は、beginかrescueのどちらかからのみ帰る

# ensure句でreturnを使ってしまうと、例外の有無にかかわらず戻り値が確定してしまうので、不具合が分かりずらくなってしまう

# rescue句を後置修飾子として書くことができる
1 / 0 rescue 0

# 最後に発生した例外のインスタンスは組み込み変数の`$!`に格納される
# バックトレースは`$@`に格納される
# しかし、可読性の問題からできる限り使わない方が良い

# メソッドのすべてが例外処理されている場合、メソッドに対してrescue句をつけることができる
def test
    1 / 0
rescue
    p 'rescue'
end

# rescue句で例外を発生させると、本来の例外が何だったのか分からなくなってしまうので気を付ける

# rescue句で例外を補足し、ログを残すなど処理をした後、引数を省略したraiseを実行すると本来の例外をそのまま発せさせることができる
begin
    1 / 0
rescue => exception
    p "test"
    raise
end

# 独自の例外クラスを定義することもできる
class TestError < StandardError
    def initialize(item)
        p item
        super
    end
end
