regex = /\d{3}-\d{4}/
regex.class #=> Regexp

# 正規表現の計算(マッチした位置が戻る)
'123-4567' =~ /\d{3}-\d{4}/ #=> 0
'hello' =~ /\d{3}-\d{4}/ #=> nil

'123-4567' !~ /\d{3}-\d{4}/ #=> false
'hello' !~ /\d{3}-\d{4}/ #=> true

# 正規表現のキャプチャを利用する
text = '私の誕生日は1997年7月17日です'
/(\d+)年(\d+)月(\d+)日/.match(text) #=> ["1997", "7", "17"]

# 条件分岐の中で判定とローカル変数への代入を同時にする
if m = /(\d+)年(\d+)月(\d+)日/.match(text)
    # ローカル変数のmを使用して処理を行う
end

# キャプチャの結果に名前を付ける(シンボル、文字列、数字のいずれでも取得することができる)
/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/.match(text) #=> [year: "1997", month: "7", day: "17"]

# キャプチャの名前をそのままローカル変数として扱うことができる(左辺、右辺を逆にすると動かない。正規表現を変数に入れても動かない)
if /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/ =~ text
    # ローカル変数として扱う
end


# 正規表現と組み合わせると便利なStringクラスのメソッド
'1997年7月17日 1998年8月18日'.scan(/(\d+)年(\d+)月(\d+)日/)
#=> [["1997", "7", "17"], ["1997", "7", "17"]]

# グループ化はしたいが、キャプチャはしたくない(文字列全体を取得した)
'1997年7月17日 1998年8月18日'.scan(/(\d+)年(\d+)月(\d+)日/)
#=> ["1997年7月17日", "1997年7月17日"]

# []に正規表現を渡す
text = '郵便番号は123-4567です'
text[/\d{3}-\d{4}/] #=> "123-456"
# マッチする物が複数ある場合最初にマッチしたものを返す
text[/(?<first>\d{3})-(?<last>\d{4})/, :first] #=> "123"
# 名前付きで取得することもできる

# 正規表現を渡して、マッチした文字列を区切り文字にして文字列を分割し、配列で返す(split)

# 第1引数の正規表現にマッチした文字列を第2引数の文字列で置き換える(gsub, gsub!)



