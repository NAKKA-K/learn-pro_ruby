# バックとレースは上がバグの発生位置に近く、下に行くほど上流に戻っている

# Ruby2.3からはdid_you_meanというgemが標準で組み込まれているため、タイポ等を指摘してくれる

# printデバックなどをするときに、pメソッドを使うと、pの引数をそのまま戻り値として返してくれるため便利
distance = p 1 - 0 #=> 1

# tapメソッドはレシーバーをそのまま返すメソッドなので、メソッドチェーンの途中に組み込むと便利
a = 'hello'.tap{|s| p s}
p '#043c78'.scan(/\w\w/).tap{|rgb| p rgb}.map(&:hex) # scanで分割した時点の値を出力できる

# ByebugというCLIデバッガgemを使用して、ステップ実行などIDEのようなデバックができる


# 汎用的なトラブルシューティング手法
# irb上で簡単なコードを動かしてみる
# ログを調べる
# 公式ドキュメントを読む
# issueを検索する(issueトラッキングシステムなどを見る)
# ライブラリのコードを読む(定義場所をメソッドで表示することができる)
'OrderItem'.method(:upcase).source_location # [gemのパス/ファイルのパス, 行数]
# テストコードを書く(エラーが出ている部分のテストを書き、それからコードを直す手順だとエラーを再現する時間が短縮される)
# ネットで調べるのは非常に危険なので、方法が載っていたとしても自分で完全に理解し、大丈夫だと確信が持てるまで調べ直すなどする必要がある
# パソコンの前から離れる
# 誰かに聞く